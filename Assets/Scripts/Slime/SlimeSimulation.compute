int width;
int height;

float deltaTime;
float time;

float decayRate;
float diffuseRatio;
float agentContributionRatio;
float randomVariance;
float deathCutoff;

float minimumPopulationRatio;
int maxFoodPheromoneStorage;

int sampleEntitiesAmount;
float minSpawnPointDistance;
float spawnPointMoveMultiplier;

bool scanFoodMap;
float4 foodColor;

struct Agent
{
    int speciesIndex;
    
    float2 position;
    float angle;
    
    float hunger;
    int foodPheromoneStorage;
};

struct Species
{
    float4 color;
    
    float2 spawnPosition;
    int population;
    int offset;
    int alivePopulation;
    float hungerAccumulation;
    float interSpeciesHungerModifier;
    
    float moveSpeed;
    float turnSpeed;
    
    float sensorAngle;
    float sensorOffset;
};

RWStructuredBuffer<Species> species;
uint speciesAmount;

RWStructuredBuffer<Agent> agents;
uint agentAmount;

//Simulation Maps
RWTexture2D<float4> cameraCaptureMap;
RWTexture2D<float4> preFoodMap;
RWTexture2D<float4> diffusedFoodMap;

RWTexture2D<float4> preTrailMap;
RWTexture2D<float4> diffusedTrailMap;

//Display
RWTexture2D<float4> displayMap;

//Debug
RWTexture2D<float4> debugMap;

// Quelle: www.cs.ubc.ca/~rbridson/docs/schechter-sca08-turbulence.pdf
uint hash(uint seed)
{
    seed ^= 2747636419u;
    seed *= 2654435769u;
    seed ^= seed >> 16;
    seed *= 2654435769u;
    seed ^= seed >> 16;
    seed *= 2654435769u;
    return seed;
}

float hash01(uint seed)
{
    return hash(seed) / 4294967295.0;
}

//converts an RGB color to the H value of the correspoding HSV color
float convertToH(float4 rgb)
{
    float cmax = max(rgb.r, max(rgb.g, rgb.b));
    float cmin = min(rgb.r, min(rgb.g, rgb.b));
    
    float delta = cmax - cmin;
    
    if (delta == 0.0)
    {
        return 0.0;
    }
    else if (rgb.r == cmax)
    {
        return ((((rgb.r - rgb.b) / delta) + 6) % 6) / 6;
    }
    else if (rgb.g == cmax)
    {
        return (((rgb.b - rgb.r) / delta) + 2) / 6;
    }
    else if (rgb.b == cmax)
    {
        return (((rgb.r - rgb.g) / delta) + 4) / 6;
    }
    
    return 0.0;
}

void senseDebug(Agent agent, Species agentSpecies, float angle, float weight)
{   
    float sensorAngle = agent.angle + angle;
    float2 sensorVector = float2(cos(sensorAngle), sin(sensorAngle));
    float2 sensorPos = agent.position + sensorVector * agentSpecies.offset;
    
    float r = weight;
    float b = 1.0 - r;
    
    debugMap[(int2) sensorPos] = float4(r, 0, b, 1);
}

float sense(Agent agent, Species agentSpecies, float angle, int id)
{
    float sensorAngle = agent.angle + angle;
    float2 sensorVector = float2(cos(sensorAngle), sin(sensorAngle));
    float2 sensorPosition = agent.position + sensorVector * agentSpecies.sensorOffset;
    
    int2 sensorCoords = (int2) sensorPosition;
    
    sensorCoords.x = clamp(sensorCoords.x, 0, width);
    sensorCoords.y = clamp(sensorCoords.y, 0, height);
    
    float4 sample = preTrailMap[sensorCoords];
    float4 foodSample = preFoodMap[sensorCoords];

    if(foodSample.a > 0.98)
    {
        return 5000;
    }
    
    float agentHue = convertToH(agentSpecies.color);
    float sampleHue = convertToH(sample);
    float diff = abs(sampleHue - agentHue);
    
    //value is the V part of HSV
    float value = max(sample.r, max(sample.g, sample.b));
    
    float smoothWeight = 8 * pow(diff, 2) - 8 * diff + 1;
    
    //agent becomes hungry if it collides with different species
    if (value > 0.82 && smoothWeight < 0)
    {
        agents[id].hunger -= smoothWeight;
    }
    
    //calculates the difference between the agents hue and the sample hue and smoothly maps it to [-1;1]
    //this results in larger differences pushing each other away while similar values attract each other
    return (smoothWeight + value / 2) * (foodSample.a + 0.5);
    
    //return preTrailMap[sensorCoords].r + preTrailMap[sensorCoords].g + preTrailMap[sensorCoords].b;
}

float2 respawn(Agent agent, Species agentSpecies, float random, int id)
{
    int randomOffset = agentSpecies.offset + random * agentSpecies.population;

    if(randomOffset >= agentSpecies.offset + sampleEntitiesAmount)
    {
        randomOffset -= sampleEntitiesAmount;
    }
    
    float2 averageSpeciesPosition;
    for(int i = 0; i < sampleEntitiesAmount; i++)
    {
        averageSpeciesPosition += agents[randomOffset + i].position;
    }
    averageSpeciesPosition = averageSpeciesPosition / sampleEntitiesAmount;

    float2 spawnMoveVector = (averageSpeciesPosition - species[agent.speciesIndex].spawnPosition) * spawnPointMoveMultiplier;

    float2 otherSpawnPointsVector;
    for(int k = 0; k < speciesAmount; k++)
    {
        if(k == agent.speciesIndex)
        {
            continue;
        }

        const float2 differenceVector = species[k].spawnPosition - species[agent.speciesIndex].spawnPosition;
        const float distanceContribution = max(0, minSpawnPointDistance - length(differenceVector)) / minSpawnPointDistance;
        
        otherSpawnPointsVector += differenceVector * distanceContribution;
    }
    otherSpawnPointsVector /= (speciesAmount - 1);
    otherSpawnPointsVector *= -spawnPointMoveMultiplier;
    
    spawnMoveVector += otherSpawnPointsVector;
    species[agent.speciesIndex].spawnPosition += spawnMoveVector;
    return species[agent.speciesIndex].spawnPosition;
}

#pragma kernel update

[numthreads(16,1,1)]
void update(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= agentAmount)
    {
        return;
    }
    
    Agent agent = agents[id.x];
    Species agentSpecies = species[agent.speciesIndex];
    float random = hash01(agent.position.y * width + agent.position.x + hash(id.x + time * 100000));

    agents[id.x].hunger += agentSpecies.hungerAccumulation * deltaTime;
    const int spawns = species[agent.speciesIndex].alivePopulation;
    const float deathChance = max(minimumPopulationRatio, (float) spawns / (float) species[agent.speciesIndex].population);
    if(random > deathChance)
    {
        return;
    }
    //kill (set back to spawn) if the agent is too hungry
    if ((agents[id.x].hunger * random * randomVariance) + (agents[id.x].hunger * (1 - randomVariance)) > deathCutoff)
    {
        agents[id.x].position = respawn(agent, agentSpecies, random, id.x);
        agents[id.x].hunger = 0;
        
        agents[id.x].foodPheromoneStorage = 0;
        
        species[agent.speciesIndex].alivePopulation = clamp(spawns - 1, spawns * minimumPopulationRatio, species[agent.speciesIndex].population);
        
        return;
    }
    
    //sense
    float weightLeft = sense(agent, agentSpecies, agentSpecies.sensorAngle, id.x);
    float weightForward = sense(agent, agentSpecies, 0, id.x);
    float weightRight = sense(agent, agentSpecies, -agentSpecies.sensorAngle, id.x);
    
    senseDebug(agent, agentSpecies, agentSpecies.sensorAngle, weightLeft);
    senseDebug(agent, agentSpecies, 0, weightForward);
    senseDebug(agent, agentSpecies, -agentSpecies.sensorAngle, weightRight);
    
    //weight is > 1000 if food Source has been found
    if(weightForward > 1000 || weightLeft > 1000 || weightRight > 1000)
    {
        agents[id.x].angle += 3.14159265359;
        agents[id.x].foodPheromoneStorage = maxFoodPheromoneStorage;

        if(random > randomVariance)
        {
            species[agent.speciesIndex].alivePopulation++;
        }
    }
    else
    {
        // Continue in same direction
        if (weightForward > weightLeft && weightForward > weightRight && random > randomVariance)
        {
            agents[id.x].angle += 0;
        }
        else if (weightForward < weightLeft && weightForward < weightRight || random <= randomVariance)
        {
            agents[id.x].angle += (random - 0.5) * 2 * agentSpecies.turnSpeed * deltaTime;
        }
	    // Turn left
        else if (weightLeft > weightRight)
        {
            agents[id.x].angle += random * agentSpecies.turnSpeed * deltaTime;
        }
	    // Turn right
        else if (weightRight > weightLeft)
        {
            agents[id.x].angle -= random * agentSpecies.turnSpeed * deltaTime;
        }
    }
    
    //direction in which agent moves and new position
    float2 moveVector = float2(cos(agents[id.x].angle), sin(agents[id.x].angle));
    float2 position = agent.position + moveVector * deltaTime * agentSpecies.moveSpeed;
    
    //bounce off borders
    if (position.x < 0 || position.x >= width || position.y < 0 || position.y >= height)
    {
        float2 wallNormal;
        
        if (position.x < 0)
        {
            wallNormal = float2(1, 0);
        }
        if (position.x >= width)
        {
            wallNormal = float2(-1, 0);
        }
        if (position.y < 0)
        {
            wallNormal = float2(0, 1);
        }
        if (position.y >= height)
        {
            wallNormal = float2(0, -1);
        }
        
        float2 reflectionVector = moveVector - 2 * dot(moveVector, wallNormal) * wallNormal;
        agents[id.x].angle = atan2(reflectionVector.y, reflectionVector.x);
        
        position.x = clamp(position.x, 0, width);
        position.y = clamp(position.y, 0, height);
    }
    else
    {
        int2 coords = (int2) position;
        float4 oldMap = preTrailMap[coords];
        preTrailMap[coords] = min(agentSpecies.color, oldMap + agentSpecies.color * agentContributionRatio * deltaTime);
        
        if(agent.foodPheromoneStorage > 0)
        {
            float pheromones = (float)agents[id.x].foodPheromoneStorage;
            agents[id.x].foodPheromoneStorage--;

            pheromones = (pheromones / maxFoodPheromoneStorage) * 0.9;
            
            preFoodMap[(int2) agent.position] = float4(1,1,1, pheromones);
        }
    }
    
    agents[id.x].position = position;
}

#pragma kernel diffuse

[numthreads(8,8,1)]
void diffuse (uint3 id : SV_DispatchThreadID)
{
    if (id.x < 0 || id.x >= (uint) width || id.y < 0 || id.y >= (uint) height)
    {
        return;
    }
    
    float4 trailColor = preTrailMap[id.xy];
    float4 trailSum = 0;

    float4 foodColor = preFoodMap[id.xy];
    float4 foodSum = 0;
    
    for (int x = -1; x <= 1; x++)
    {
        for (int y = -1; y <= 1; y++)
        {
            int sampleX = clamp(id.x + x, 0, width);
            int sampleY = clamp(id.y + y, 0, height);
            
            trailSum += preTrailMap[int2(sampleX, sampleY)];
            foodSum += preFoodMap[int2(sampleX, sampleY)];
        }
    }
    
    float4 blurredColor = trailSum / 9;
    float diffuseWeight = saturate(diffuseRatio * deltaTime);
    blurredColor = trailColor * (1 - diffuseWeight) + blurredColor * diffuseWeight;
    
    diffusedTrailMap[id.xy] = max(0, blurredColor - decayRate * deltaTime);

    float4 blurredFood = foodSum / 9;
    blurredFood = foodColor * (1 - diffuseWeight) + blurredFood * diffuseWeight;

    if(cameraCaptureMap[id.xy].a == 1)
    {
        blurredFood = float4(1,1,1,1);
    }
    
    diffusedFoodMap[id.xy] = max(0, blurredFood - decayRate * deltaTime);;
}

float3 shiftColor(float t)
{
    float3 a = float3(0.500, 0.500, 0.500);
    float3 b = float3(1.000, 1.000, 1.000);
    float3 c = float3(1.000, 1.000, 1.000);
    float3 d = float3(0.000, 0.333, 0.667);

    return a + b*cos(6.28318*(c*t+d));
}

#pragma kernel display

[numthreads(8, 8, 1)]
void display(uint3 id : SV_DispatchThreadID)
{
    if (id.x < 0 || id.x >= (uint) width || id.y < 0 || id.y >= (uint) height)
    {
        return;
    }
    
    float foodAlpha = diffusedFoodMap[id.xy].a;
    float4 color = diffusedTrailMap[id.xy];

    /* TODO: Mabye play around with this a bit, idk
    float4 shiftedColor = float4(shiftColor(convertToH(color) + 0.1), color.a);

    color = lerp(min(1, color.a * color.a), color, shiftedColor);

    color = color.a * color + (1 - color.a) * float4(0,0,0,1);
    */
    
    if(scanFoodMap)
    {
        color = diffusedFoodMap[id.xy] * foodColor + (1 - color) * (1 - foodAlpha);
    }
    else
    {
        color = diffusedFoodMap[id.xy] * foodColor + color * (1 - foodAlpha); 
    }

    displayMap[id.xy] = color;

    //DEBUG
    /*
    for(uint i = 0; i < speciesAmount; i++)
    {
        const int2 spawnCoords = (int2) species[i].spawnPosition; 

        for(int x = 0; x < 5; x++)
        {
            for(int y = 0; y < 5; y++)
            {
                displayMap[spawnCoords + int2(x,y)] = float4(1, 1, 1, 1);
            }
        }
    }
    */
    
    //displayMap[id.xy] = foodMap[id.xy];
}

#pragma kernel debug

[numthreads(8,8,1)]
void debug(uint3 id : SV_DispatchThreadID)
{
    if (id.x < 0 || id.x >= (uint) width || id.y < 0 || id.y >= (uint) height)
    {
        return;
    }
    
    float4 color = debugMap[id.xy];
    color -= 0.01;
    
    debugMap[id.xy] = max(0, color);
    
    if (debugMap[id.xy].r + debugMap[id.xy].g + debugMap[id.xy].b < 0.9)
    {
        debugMap[id.xy] = float4(0, 0, 0, 0);
    }
}
