// Each #kernel tells which function to compile; you can have many kernels

int width;
int height;

float time;

RWTexture2D<float4> displayMap;
RWTexture2D<float4> processedMap;

float scanFoodMap;

struct PixelatedArea
{
    uint bottom;
    uint left;

    uint top;
    uint right;
};

StructuredBuffer<PixelatedArea> pixelatedAreas;
int pixelatedAreasAmount;

float pixelSize;
float whiteNoiseRatio;

// Quelle: www.cs.ubc.ca/~rbridson/docs/schechter-sca08-turbulence.pdf
uint hash(uint seed)
{
    seed ^= 2747636419u;
    seed *= 2654435769u;
    seed ^= seed >> 16;
    seed *= 2654435769u;
    seed ^= seed >> 16;
    seed *= 2654435769u;
    return seed;
}

float hash01(uint seed)
{
    return hash(seed) / 4294967295.0;
}

#pragma kernel applyEffects

[numthreads(8,8,1)]
void applyEffects (uint3 id : SV_DispatchThreadID)
{
    if (id.x < 0 || id.x >= (uint) width || id.y < 0 || id.y >= (uint) height)
    {
        return;
    }

    if(scanFoodMap)
    {
        processedMap[id.xy] = 1 - displayMap[id.xy];
        return;
    }
    
    processedMap[id.xy] = displayMap[id.xy];

    if(pixelatedAreasAmount == 0)
    {
        return;
    }
    
    for(int i = 0; i < pixelatedAreasAmount; i++)
    {
        const PixelatedArea area = pixelatedAreas[i];
        
        if(id.x >= area.left && id.x <= area.right && id.y >= area.bottom && id.y <= area.top)
        {
            float2 pixelationAmount = float2(pixelSize / width, pixelSize / height);
            
            float2 uv = float2((float)id.x / (float)width, (float)id.y / (float)height);
            float2 pixelationSample = float2(floor(uv.x / pixelationAmount.x) * pixelationAmount.x, floor(uv.y / pixelationAmount.y) * pixelationAmount.y);

            int2 xy = int2(pixelationSample.x * width, pixelationSample.y * height);

            time = floor(time * 0.1);
            float random = hash01(xy.x + xy.y + hash(xy.x + time * 100000));
            if(random < whiteNoiseRatio)
            {
                processedMap[id.xy] = 1 - displayMap[xy];
            }
            else
            {
                processedMap[id.xy] = displayMap[xy];
            }
        }
    }

}
